const INCLUDE_TESTS=!0;function parseMarkdownTable(a){const n=a.trim().split(`
`).map(s=>s.trim());if(n.length<2)return[];const e=n[0].replace(/^\||\|$/g,"").split("|").map(s=>s.trim()),o=n.slice(2).map(s=>{const t=s.replace(/^\||\|$/g,"").split("|").map(c=>c.trim()),i={};return e.forEach((c,l)=>{i[c]=t[l]||""}),i});return o.forEach(s=>{const t=s.term?.trim()||"";t.startsWith("?")&&(s._ignore=!0,console.log(`Ignoring row: ${t}`))}),o}function extractReplacements(a){const n={},e=/(?:"([^"]+)"|'([^']+)'|([\w-]+))\^("([^"]+)"|'([^']+)'|([\w-]+))/gi;for(const r of a)for(const o of["term","sub-term","notes"]){const s=r[o]||"";let t;for(;(t=e.exec(s))!==null;){const i=(t[1]||t[2]||t[3]||"").toLowerCase().trim();let c="";t[5]?c=t[5].trim():t[6]?c=t[6].trim():t[7]&&(c=t[7].trim()),i&&c&&(console.log(`Defining: "${i}" \u2192 "${c}"`),n[i]=c)}}return n}function stripDefinitions(a){const n=/(?:"([^"]+)"|'([^']+)'|([\w-]+))\^("([^"]+)"|'([^']+)'|([\w-]+))/gi;for(const e of a)for(const r of["term","sub-term","notes"])e[r]&&(e[r]=e[r].replace(n,(o,s,t,i)=>s||t||i||""))}function escapeRegExp(a){return a.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function applyReplacements(a,n){for(const e of a)["term","sub-term","notes"].forEach(r=>{let o=e[r]||"";const s={};for(const t of Object.keys(n)){const i=new RegExp(`\\!\\b${escapeRegExp(t)}\\b`,"gi");o=o.replace(i,c=>{const l=`temp_placeholder_${t.toUpperCase()}`;return s[l]=c.slice(1),l})}for(const[t,i]of Object.entries(n)){const c=new RegExp(`\\b${escapeRegExp(t)}\\b`,"gi");o=o.replace(c,i)}for(const[t,i]of Object.entries(s)){const c=new RegExp(escapeRegExp(t),"g");o=o.replace(c,i)}e[r]=o})}function processData(a){const n=[];let e={term:"",subTerm:"",notes:"",book:0,page:0};for(const r of a){if(r._ignore)continue;const o=(r.term||"").trim(),s=(r["sub-term"]||"").trim(),t=(r.notes||"").trim(),i=(r.book||"").trim(),c=(r.page||"").trim(),l=o!=="",h=s!=="",T=t!=="",p=i!=="",m=c!=="";let u=o,d=s,f=t,b=p?parseInt(i):0,g=m?parseInt(c):0;l&&!h&&!T&&!p&&!m&&!o.endsWith("*")?(u=o,d="",f="",b=e.book,g=e.page):l&&!h&&!T&&!p&&!m&&o.endsWith("*")?(u=o.replace(/\*$/,""),d=e.subTerm,f=e.notes,b=e.book,g=e.page):!l&&h&&!T&&!p&&!m?(u=e.term,d=s,f="",b=e.book,g=e.page):(u=o||e.term,d=s,f=t,b=p?parseInt(i):e.book,g=m?parseInt(c):e.page);const k={term:u,subTerm:d,notes:f,book:b,page:g};n.push(k),e=k}return n.sort((r,o)=>{const s=r.term.localeCompare(o.term);if(s!==0)return s;const t=r.subTerm.localeCompare(o.subTerm);return t!==0?t:r.book-o.book}),n}function renderToHTML(a){const n=document.createElement("table");n.innerHTML=`
    <thead>
      <tr><th>Term</th><th>Sub-term</th><th>Notes</th><th>Book</th><th>Page</th></tr>
    </thead>
    <tbody>
      ${a.map(e=>`
        <tr>
          <td>${e.term}</td>
          <td>${e.subTerm}</td>
          <td>${e.notes}</td>
          <td>${e.book}</td>
          <td>${e.page}</td>
        </tr>
      `).join("")}
    </tbody>
  `,document.getElementById("output").innerHTML="",document.getElementById("output").appendChild(n)}function runInBrowser(){document.getElementById("create_index_button").addEventListener("click",()=>{const a=document.getElementById("index_input").value,n=parseMarkdownTable(a),e=extractReplacements(n);stripDefinitions(n),applyReplacements(n,e);const r=processData(n);renderToHTML(r)})}function runTests(){const a=`
    | term              | sub-term | notes                                  | book | page |
    |-------------------|----------|----------------------------------------|------|------|
    | vuln^vulnerability|          | Vuln is bad.                           | 1    | 10   |
    | vuln              |          | vuln is common.                        |      |      |
    | ttp^"tactics, techniques & procedures" |   | !ttp should not be replaced           | 1    | 11   |
    `,n=[{term:"tactics, techniques & procedures",subTerm:"",notes:"ttp should not be replaced",book:1,page:11},{term:"vulnerability",subTerm:"",notes:"vulnerability is bad.",book:1,page:10},{term:"vulnerability",subTerm:"",notes:"vulnerability is common.",book:1,page:10}],e=parseMarkdownTable(a),r=extractReplacements(e);stripDefinitions(e),applyReplacements(e,r);const o=processData(e);JSON.stringify(o)===JSON.stringify(n)?(console.log("\u2705 Test passed."),process.exit(0)):(console.error("\u274C Test failed."),console.error("Expected:",JSON.stringify(n,null,2)),console.error("Received:",JSON.stringify(o,null,2)),process.exit(1))}typeof process<"u"&&process.argv&&process.argv.includes("-t")?runTests():typeof document<"u"&&runInBrowser();
